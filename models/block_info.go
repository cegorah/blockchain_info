// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BlockInfo block info
//
// swagger:model BlockInfo
type BlockInfo struct {

	// first ten transactions
	FirstTenTransactions []*TransactionInfo `json:"first_ten_transactions"`

	// id
	ID int64 `json:"id,omitempty"`

	// net code
	NetCode string `json:"net_code,omitempty"`

	// next hash
	NextHash string `json:"next_hash,omitempty"`

	// prev hash
	PrevHash string `json:"prev_hash,omitempty"`

	// size
	Size int64 `json:"size,omitempty"`

	// timestamp
	// Format: date
	Timestamp strfmt.Date `json:"timestamp,omitempty"`
}

// Validate validates this block info
func (m *BlockInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFirstTenTransactions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BlockInfo) validateFirstTenTransactions(formats strfmt.Registry) error {
	if swag.IsZero(m.FirstTenTransactions) { // not required
		return nil
	}

	for i := 0; i < len(m.FirstTenTransactions); i++ {
		if swag.IsZero(m.FirstTenTransactions[i]) { // not required
			continue
		}

		if m.FirstTenTransactions[i] != nil {
			if err := m.FirstTenTransactions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("first_ten_transactions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("first_ten_transactions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BlockInfo) validateTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.Timestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("timestamp", "body", "date", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this block info based on the context it is used
func (m *BlockInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFirstTenTransactions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BlockInfo) contextValidateFirstTenTransactions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FirstTenTransactions); i++ {

		if m.FirstTenTransactions[i] != nil {
			if err := m.FirstTenTransactions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("first_ten_transactions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("first_ten_transactions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *BlockInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BlockInfo) UnmarshalBinary(b []byte) error {
	var res BlockInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
