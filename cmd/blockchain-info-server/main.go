// Code generated by go-swagger; DO NOT EDIT.

package main

import (
	"fmt"
	"log"
	"os"
	"path/filepath"

	"github.com/go-openapi/loads"
	flags "github.com/jessevdk/go-flags"
	"github.com/spf13/viper"

	"github.com/cegorah/blockchain_info/restapi"
	"github.com/cegorah/blockchain_info/restapi/operations"
)

// This file was generated by the swagger tool.
// Make sure not to overwrite this file after you generated it because all your edits would be lost!

func config(filePath string) {
	if filePath == "" {
		dr, e := filepath.Abs("./")
		if e != nil {
			log.Fatalln(e)
		}
		filePath = fmt.Sprintf("%s/config/config.json", dr)
	}
	viper.SetConfigFile(filePath)
	if e := viper.ReadInConfig(); e != nil {
		log.Fatalln(e)
	}
	viper.BindEnv("DEBUG")
	viper.BindEnv("PSQL_DSN")
	viper.BindEnv("REDIS_USERNAME")
	viper.BindEnv("REDIS_PASSWORD")
	viper.SetDefault("services.redis.connection_string", "localhost:6379")
	viper.SetDefault("services.redis.ttl", 5)
	viper.SetDefault("redis_username", "")
	viper.SetDefault("redis_password", "")
	viper.SetDefault("services.init_timeout", 5)
	viper.SetDefault("services.query_timeout", 5)
	viper.SetDefault("services.redis.db", 0)
}

func main() {
	config("")
	swaggerSpec, err := loads.Embedded(restapi.SwaggerJSON, restapi.FlatSwaggerJSON)
	if err != nil {
		log.Fatalln(err)
	}

	api := operations.NewBlockchainInfoAPI(swaggerSpec)
	server := restapi.NewServer(api)
	defer server.Shutdown()

	parser := flags.NewParser(server, flags.Default)
	parser.ShortDescription = "blockchain_info"
	parser.LongDescription = swaggerSpec.Spec().Info.Description
	server.ConfigureFlags()
	for _, optsGroup := range api.CommandLineOptionsGroups {
		_, err := parser.AddGroup(optsGroup.ShortDescription, optsGroup.LongDescription, optsGroup.Options)
		if err != nil {
			log.Fatalln(err)
		}
	}

	if _, err := parser.Parse(); err != nil {
		code := 1
		if fe, ok := err.(*flags.Error); ok {
			if fe.Type == flags.ErrHelp {
				code = 0
			}
		}
		os.Exit(code)
	}

	server.ConfigureAPI()

	if err := server.Serve(); err != nil {
		log.Fatalln(err)
	}

}
